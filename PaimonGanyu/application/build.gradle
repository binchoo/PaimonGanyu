plugins {
    id "org.springframework.boot" version "${bootVersion}"
    id "io.spring.dependency-management" version '1.0.11.RELEASE'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation ("com.amazonaws:aws-java-sdk-dynamodb:${awsSdkVersion}") {
        because 'All workflows use the Amazon DynamoDB as their persistence system.'
    }
    implementation ('com.github.derjust:spring-data-dynamodb:5.1.0') {
        because 'To automatically create some DynamoDB repositories.'
    }

    implementation ("com.amazonaws:aws-java-sdk-sns:${awsSdkVersion}") {
        because 'Hoyopass fanout leverages an SNS topic.'
    }

    implementation ("com.amazonaws:aws-java-sdk-ssm:${awsSdkVersion}") {
        because 'Hoyopass could digest secured (RSA-signed) hoyopass strings.'
    }

    implementation 'com.amazonaws:aws-lambda-java-core:1.2.1'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'
    implementation 'com.amazonaws.serverless:aws-serverless-java-container-springboot2:1.8.1'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

bootJar {
    archiveBaseName='paimonganyu-skill'
}

task buildZipNoTomcat(type: Zip) {
    from compileJava
    from processResources
    into('lib') {
        from (configurations.runtimeClasspath) {
            exclude 'tomcat-embed-*'
        }
    }
}

def samBuildDir(String stackName) {
    '../'.repeat(project.depth + 1) + "sam/${stackName}/.aws-sam/build"
}

task copyBuiltZipNoTomcat(type: Copy) {
    def dest = samBuildDir('paimonganyu')
    from buildZipNoTomcat
    into(dest)
    doLast {
        println "$project.name:$name has moved fat-zip into $dest"
    }
}

task copyBootJar(type: Copy) {
    def dest = samBuildDir('paimonganyu-skill')
    from bootJar
    into(dest)
    doLast {
        println "$project.name:$name has moved bootJar into $dest"
    }
}

task stopRunningDynamoDBContainer(type: Exec) {
    standardOutput = new ByteArrayOutputStream()
    commandLine = ['bash', '-c',
                   'docker ps -q | while read line; do if [[ $(docker port $line) == *"3306"* ]]; then docker stop $line; fi; done;']
    doLast {
        println "Container stopped: ${standardOutput.toString()}"
    }
}

task startDynamoDBContainer(type: Exec) {
    dependsOn stopRunningDynamoDBContainer
    standardOutput = new ByteArrayOutputStream()
    commandLine = ['docker', 'run', '-p', '3306:8000', '-d', 'amazon/dynamodb-local']
    doLast {
        println "Container started: ${standardOutput.toString()}"
    }
}

/**
 * @param -PlocalTest=true|false
 */
test {
    def isLocalTest = Boolean.parseBoolean(project.findProperty("localTest"))
    if (isLocalTest)
        dependsOn startDynamoDBContainer
    else {
        filter {
            excludeTestsMatching("org.binchoo.paimonganyu.infra.hoyopass.SecuredHoyopassRegistryLocalSystemTest")
        }
    }
}