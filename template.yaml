AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  paimonganyu

  SAM Template for paimonganyu

Globals:
  Function:
    CodeUri: ../../PaimonGanyu/build/distributions/PaimonGanyu.zip
    Timeout: 60
    Runtime: java8
    MemorySize: 512
    Architectures:
      - x86_64

Resources:
  # Hoyopass
  UserHoyopassTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserHoyopass
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: botUserId
          AttributeType: S
      KeySchema:
        - AttributeName: botUserId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_IMAGE

#  PaimonGanyuSpringBootApp:
#    Type: AWS::Serverless::Function
#    Properties:
#      Handler: #TODO
#      Events:
#        RestApi:
#          Type: Api
#          Properties:
#            #TODO
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref UserHoyopassTable
#        - DynamoDBReadPolicy:
#            TableName: !Ref UserRedeemTable
#        - DynamoDBReadPolicy:
#            TableName: !Ref UserDailyCheckTable

  # Hoyopass Fanout
  UserHoyopassTopic:
    Type: AWS::SNS::Topic

  UserHoyopassFanoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: org.binchoo.paimonganyu.hoyopass.infra.fanout.UserHoyopassFanoutLambda::handler
      Events:
        NewUserHoyopassEvent:
          Type: DynamoDB
          Properties:
            StartingPosition: LATEST
            Stream: !GetAtt UserHoyopassTable.StreamArn
            Enabled: true
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt UserHoyopassTopic.TopicName
      Environment:
        Variables:
          USERHOYOPASS_TOPIC: !Ref UserHoyopassTopic

#  # Code Redeem
#  UserRedeemTable:
#    Type: AWS::Serverless::SimpleTable
#    Properties:
#      PrimaryKey:
#        Name: botUserId
#        Type: String
#
#  CodeBucket:
#    Type: AWS::S3::Bucket
#    Properties:
#      BucketName: !Sub CodeBucket-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}
#
#  CodeRedeemRequestQueue:
#    Type: AWS::SQS::Queue
#
#  CodeRedeemRequester:
#    Type: AWS::Serverless::Function
#    Properties:
#      Handler: #TODO
#      Events:
#        NewRedeemCodeEvent:
#          Type: S3
#          Properties:
#            Bucket: !Ref CodeBucket
#            Events: s3:ObjectCreated:*.json
#      Policies:
#        - S3ReadPolicy:
#            BucketName: !Sub CodeBucket-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}
#        - DynamoDBReadPolicy:
#            TableName: !Ref UserHoyopassTable
#        - DynamoDBReadPolicy:
#            TableName: !Ref UserRedeemTable
#        - SQSSendMessagePolicy:
#            QueueName: !GetAtt CodeRedeemRequestQueue.QueueName
#      Environment:
#        Variables:
#          CODEREDEEM_QUEUE_NAME: !Ref CodeRedeemRequestQueue
#
#  CodeRedeemWorker:
#    Type: AWS::Serverless::Function
#    Properties:
#      Handler: #TODO
#      Events:
#        NewUserHoyopassEvent:
#          Type: SNS
#          Properties:
#            Topic: !Ref UserHoyopassTopic
#        CodeRedeemRequestQueueEvent:
#          Type: SQS
#          Properties:
#            Queue: !Ref CodeRedeemRequestQueue
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref UserRedeemTable
#
  # Daily Check
  UserDailyCheckTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserDailyCheck
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: botUserIdLtuid
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: botUserIdLtuid
          Projection:
            ProjectionType: ALL
          KeySchema:
            - AttributeName: botUserIdLtuid
              KeyType: HASH

  DailyCheckRequestQueue:
    Type: AWS::SQS::Queue

  DailyCheckHitoriRequesterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: org.binchoo.paimonganyu.dailycheck.DailyCheckHitoriRequesterLambda::handler
      Events:
        NewUserHoyopassEvent:
          Type: SNS
          Properties:
            Topic: !Ref UserHoyopassTopic
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UserDailyCheckTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt DailyCheckRequestQueue.QueueName
      Environment:
        Variables:
          DAILYCHECK_QUEUE_URL: !Ref DailyCheckRequestQueue

  DailyCheckBatchRequesterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: org.binchoo.paimonganyu.dailycheck.DailyCheckBatchRequesterLambda::handler
      Events:
        BatchDailyCheckEvent:
          Type: Schedule
          Properties:
            Schedule: 'cron(1 3/8 ? * * *)' # every day 04:01AM, 12:01PM, 08:01PM GMT+9 (Seoul)
            Name: batched-dailycheck
            Description: Do batched dailycheck three times a day!
            Enabled: true
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UserDailyCheckTable
        - DynamoDBReadPolicy:
            TableName: !Ref UserHoyopassTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt DailyCheckRequestQueue.QueueName
      Environment:
        Variables:
          DAILYCHECK_QUEUE_URL: !Ref DailyCheckRequestQueue

#
#  DailyCheckWorker:
#    Type: AWS::Serverless::Function
#    Properties:
#      Handler: #TODO
#      Events:
#        NewUserHoyopassEvent:
#          Type: SNS
#          Properties:
#            Topic: !Ref UserHoyopassTopic
#        DailyCheckRequestQueueEvent:
#          Type: SQS
#          Properties:
#            Queue: !GetAtt DailyCheckRequestQueue.Arn
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref UserDailyCheckTable
